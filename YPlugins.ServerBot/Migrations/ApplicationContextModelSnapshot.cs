// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerBot;

#nullable disable

namespace ServerBot.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ServerBot.Entities.LanguageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IETF_LanguageTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnglishName = "English",
                            IETF_LanguageTag = "en"
                        },
                        new
                        {
                            Id = 2,
                            EnglishName = "Russian",
                            IETF_LanguageTag = "ru"
                        },
                        new
                        {
                            Id = 3,
                            EnglishName = "French",
                            IETF_LanguageTag = "fr"
                        },
                        new
                        {
                            Id = 4,
                            EnglishName = "Nederlands",
                            IETF_LanguageTag = "nl"
                        },
                        new
                        {
                            Id = 5,
                            EnglishName = "German",
                            IETF_LanguageTag = "de"
                        },
                        new
                        {
                            Id = 6,
                            EnglishName = "Italian",
                            IETF_LanguageTag = "it"
                        },
                        new
                        {
                            Id = 7,
                            EnglishName = "Spanish",
                            IETF_LanguageTag = "es"
                        },
                        new
                        {
                            Id = 8,
                            EnglishName = "Japanese",
                            IETF_LanguageTag = "ja"
                        },
                        new
                        {
                            Id = 9,
                            EnglishName = "Chinese",
                            IETF_LanguageTag = "zh"
                        },
                        new
                        {
                            Id = 10,
                            EnglishName = "Czech",
                            IETF_LanguageTag = "cs"
                        },
                        new
                        {
                            Id = 11,
                            EnglishName = "Portuguese",
                            IETF_LanguageTag = "pt"
                        },
                        new
                        {
                            Id = 12,
                            EnglishName = "Hungarian",
                            IETF_LanguageTag = "hu"
                        },
                        new
                        {
                            Id = 13,
                            EnglishName = "Polish",
                            IETF_LanguageTag = "pl"
                        });
                });

            modelBuilder.Entity("ServerBot.Entities.LicenseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Program")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeOfLicense")
                        .HasColumnType("integer");

                    b.Property<int?>("UserEntityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Licenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Specifications",
                            Program = "Tekla",
                            TypeOfLicense = 1
                        },
                        new
                        {
                            Id = 2,
                            ExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Excel report generator",
                            Program = "Tekla",
                            TypeOfLicense = 1
                        },
                        new
                        {
                            Id = 3,
                            ExpirationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Profile chooser",
                            Program = "Tekla",
                            TypeOfLicense = 1
                        });
                });

            modelBuilder.Entity("ServerBot.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ComputerInformation")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<long?>("TgId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ServerBot.Entities.LicenseEntity", b =>
                {
                    b.HasOne("ServerBot.Entities.UserEntity", null)
                        .WithMany("Licenses")
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("ServerBot.Entities.UserEntity", b =>
                {
                    b.HasOne("ServerBot.Entities.LanguageEntity", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ServerBot.Entities.UserEntity", b =>
                {
                    b.Navigation("Licenses");
                });
#pragma warning restore 612, 618
        }
    }
}
